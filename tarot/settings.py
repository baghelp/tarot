"""
Django settings for tarot project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
#from djangocodemirror.settings import *
#from djangocodemirror.helper import codemirror_settings_update

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-yf+88%0&me-18fepue*lz1)!&hjtymnwpx13&q!nm8ydsetng)'
import os
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-yf+88%0&me-18fepue*lz1)!&hjtymnwpx13&q!nm8ydsetng)')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'

ALLOWED_HOSTS = [
    'thawing-dusk-38737.herokuapp.com', 'thawing-dusk-38737-heroku-24-69dcee1b4055.herokuapp.com', '127.0.0.1', 'www.bageldreams.com', 'localhost',
]



# Application definition

INSTALLED_APPS = [
    # tarot
    'tarot_app',
    'crispy_forms',
    'guest_user',

    # account management
    'accounts',

    # code immersion
    'code_immersion_app',

    # default django stuff
    'django.contrib.admin',
    'django.contrib.humanize',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'guest_user.backends.GuestBackend',
)

if os.environ.get('DJANGO_DEBUG', '') == 'False':
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 1
else:
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_HSTS_SECONDS = 0

ROOT_URLCONF = 'tarot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['common_templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tarot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Heroku: Update database configuration from $DATABASE_URL.
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# The URL to use when referring to static files (where they will be served from)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/static/'

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Settings for the auth backend
LOGIN_REDIRECT_URL = '../home'
LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = '/tarot'

# Settings for guest user registration
GUEST_USER_CONVERT_REDIRECT_URL = '../home'

# Code mirror configurations
CODEMIRROR_PATH = STATIC_URL + '/' + 'codemirror'
CODEMIRROR_MODE = 'clike/text/x-csrc'
CODEMIRROR_THEME = 'abcdef'
'''
CODEMIRROR_MODES.update({
    'restructuredtext': {
        'modes': ['clike/text/x-csrc', 'clike/x-shader/x-fragment'],
        'matchBrackets': True,
        'addons': [
        'CodeMirror/addon/runmode/colorize.js',
            'CodeMirror/addon/runmode/runmode-standalone.js',
        ],
        'extra_css': [],
        'themes': [ 'abcdef',
        ],
    },
})

CODEMIRROR_THEMES['abcdef'] = 'abcdef.css'

'''
